{
  "flashcards": [
    {
      "question": "What is React?",
      "answer": "React is a JavaScript library for building user interfaces, particularly for single-page applications. It allows developers to create reusable UI components."
    },
    {
      "question": "What is a component in React?",
      "answer": "A component in React is a reusable piece of UI that can manage its own state and logic. Components can be class-based or functional."
    },
    {
      "question": "What is JSX?",
      "answer": "JSX stands for JavaScript XML. It is a syntax extension for JavaScript that looks similar to HTML and is used in React to describe the UI structure."
    },
    {
      "question": "What is the virtual DOM?",
      "answer": "The virtual DOM is a lightweight representation of the actual DOM in memory. React uses it to optimize updates by comparing the virtual DOM with the actual DOM and making only necessary changes."
    },
    {
      "question": "How do you create a functional component in React?",
      "answer": "A functional component in React is created by writing a JavaScript function that returns JSX. For example: `function MyComponent() { return <div>Hello, World!</div>; }`"
    },
    {
      "question": "What is a state in React?",
      "answer": "State in React is an object that holds information that can change over the lifecycle of a component. It is used to control the component's behavior and render UI updates when the state changes."
    },
    {
      "question": "What are props in React?",
      "answer": "Props (short for properties) are inputs to a React component. They are used to pass data from a parent component to a child component."
    },
    {
      "question": "What is the difference between state and props?",
      "answer": "State is managed within a component and can change over time, whereas props are passed from a parent component to a child component and are read-only."
    },
    {
      "question": "How do you update the state in a React component?",
      "answer": "You update the state in a React component by using the `setState` function in class components or the `useState` hook in functional components."
    },
    {
      "question": "What is the useEffect hook used for in React?",
      "answer": "The `useEffect` hook is used in functional components to perform side effects, such as fetching data, directly updating the DOM, or setting up subscriptions. It runs after the render and can clean up after itself."
    },
    {
      "question": "What is the purpose of the key prop in React?",
      "answer": "The `key` prop in React is used to uniquely identify elements in a list. It helps React optimize rendering by tracking which items have changed, been added, or removed."
    },
    {
      "question": "What is lifting state up in React?",
      "answer": "Lifting state up is the process of moving state from a child component to a parent component, so that the state can be shared among multiple child components."
    },
    {
      "question": "What is the React Context API?",
      "answer": "The React Context API is a way to manage global state in a React application, allowing you to pass data through the component tree without having to pass props down manually at every level."
    },
    {
      "question": "What is a React fragment?",
      "answer": "A React fragment is a wrapper component that allows you to group multiple elements without adding extra nodes to the DOM. It is represented as `<React.Fragment>` or shorthand `<>...</>`."
    },
    {
      "question": "What is React Router?",
      "answer": "React Router is a library for routing in React applications. It allows you to define multiple routes and navigate between them, enabling client-side navigation."
    }
  ]  
}